class Solution {
/*
12.整数转罗马数字
罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给你一个整数，将其转为罗马数字
*/
  int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
  String[] symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
  public String intToRoman(int num) {
    StringBuffer sb = new StringBuffer();
    for(int i = 0; i < values.length; i++) {
      int value = values[i];
      String symbol = symbols[i];
      while(num >= value) {
        sb.append(symbol);
        num -= value;
      }
      if(num == 0) {
        break;
      }
    }
    return sb.toString();
  }
/*
15.三数之和
给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请
你返回所有和为 0 且不重复的三元组。
注意：答案中不可以包含重复的三元组。
*/
  public List<List<Integer>> threeSum(int[] nums) {
    int n = nums.length;
    Arrays.sort(nums);
    List<List<Integer>> ans = new ArrayList<>();
    for(int first = 0; first < n; first++) {
      if(first > 0 && nums[first] == nums[first - 1]) {
        continue;
      }
      int target = -nums[first];
      int third = n - 1;
      for(int second = first + 1; second < n; second++) {
        if(second > first + 1 && nums[second] == nums[second - 1]) {
          continue;
        }
        while(second < third && nums[second] + nums[third] > target) {
          third--;
        }
        if(third == second) {
          break;
        }
        if(nums[second] + nums[third] == target) {
          List<Integer> list = new ArrayList();
          list.add(nums[first]);
          list.add(nums[second]);
          list.add(nums[third]);
          ans.add(list);
        }
      }
    }
    return ans;
  }
/*
16.最接近的三数之和
给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。
返回这三个数的和。
假定每组输入只存在恰好一个解。
*/
  public int threeSumClosest(int[] nums, int target) {
    Arrays.sort(nums);
    int ans = nums[0] + nums[1] + nums[2];
    for(int i = 0; i < nums.length; i++) {
      int start = i + 1, end = nums.length - 1;
      while(start < end) {
        int sum = nums[start] + nums[end] + nums[i];
        if(Math.abs(target - sum) < Math.abs(target - ans)) {
          ans = sum;
        }
        if(sum > target) {
          end--;
        } else if(sum < target) {
            start++;
        } else {
            return ans;
        }
      }
    }
    return ans;
  }
}
